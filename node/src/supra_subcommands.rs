use hex;
use libp2p_core::identity::{ed25519, PublicKey};
use structopt::StructOpt;

#[derive(Debug, StructOpt)]
pub struct DecodePublicKeyCmd {
    /// "Public key (hex)" generated by `subkey generate --scheme sr25519` command
    #[structopt()]
    pub public_key: String,
}

impl DecodePublicKeyCmd {
    pub fn convert_to_peer_vec(&self) -> Result<(), sc_cli::Error> {
        let bytes = hex::decode(&self.public_key).unwrap();
        let secret = ed25519::SecretKey::from_bytes(bytes).unwrap();
        let keypair = ed25519::Keypair::from(secret);
        let node_key = hex::encode(keypair.secret().as_ref());
        let peer_id = PublicKey::Ed25519(keypair.public()).into_peer_id();
        let vec_of_peer = bs58::decode(peer_id.to_base58()).into_vec().unwrap();

        println!("Node Key: {}", node_key);
        println!("PeerId: {}", peer_id.to_string());
        println!("PeerId Hex: {}", hex::encode(&vec_of_peer));
        println!("PeerId Vector: {:?}", &vec_of_peer);

        Ok(())
    }
}